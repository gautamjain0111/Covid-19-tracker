{"version":3,"sources":["InfoBox.js","Table.js","util.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Table","countries","map","country","sortData","data","sortedData","sort","a","b","App","useState","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","useEffect","fetch","then","response","json","name","value","iso2","getCountriesData","onCountryChange","event","countryCode","target","url","console","log","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.66611534.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card , CardContent, Typography } from \"@material-ui/core\"\r\n\r\nfunction InfoBox({title, cases, total}) {\r\n    return (\r\n         <Card className=\"infoBox\"> \r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                   {title}\r\n                </Typography>\r\n\r\n                <h2 className=\"infoBox__cases\">{cases}</h2>\r\n\r\n                <Typography color=\"textSecondary\" className=\"infoBox_total\">\r\n                   {total} Total\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport './Table.css'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className = \"table\">\r\n             {countries.map(({country}) => (   //De-structuring country and cases\r\n                <tr>\r\n                    <td>\r\n                        {country}\r\n                    </td>\r\n                    <td>\r\n                      <strong>  {country.cases} </strong>\r\n                    </td>\r\n                </tr>\r\n\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","//utility function file\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) => {\r\n        if(a.cases >b.cases) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n}","import React,{useState,useEffect} from 'react';\nimport {MenuItem, Card, FormControl, Select, CardContent} from \"@material-ui/core\"\nimport './App.css';\nimport InfoBox from './InfoBox'\n//import Map from './Map'\nimport Table from './Table'\nimport {sortData} from './util'\n//import LineGraph from './LineGraph'\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry ] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo ] = useState({});\n  const [tableData, setTableData ] = useState([]);\n//USEEFFECT runs the piece of code based on a given condition\n\nuseEffect(() => {\n  fetch(\"https://disease.sh/v3/covid-19/all\")\n  .then((response) => response.json())\n  .then((data) => {\n    setCountryInfo(data);\n  });\n} , [])\n\nuseEffect(() =>{\n\nconst getCountriesData = async () => {\n  await fetch(\"https://disease.sh/v3/covid-19/countries\")\n  .then((response) => response.json()) //get all the response and then select response of json object\n  .then((data) => {\n    const countries = data.map((country) =>(\n      {\n        name: country.country,    //returning name and value variables\n        value: country.countryInfo.iso2,\n      }\n    ));\n    \n    const sortedData = sortData(data);\n    setTableData(sortedData);      //taking unsorted lists \n    setCountries(countries);\n  });\n};\n\ngetCountriesData(countries);\n},[])\n\nconst onCountryChange = async (event) => {\n  const countryCode = event.target.value;\n\n  const url = countryCode === \"worldwide\"? \"https://disease.sh/v3/covid-19/all\"\n                            :`https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n  await fetch(url)\n  .then(response => response.json())\n  .then(data => {\n    setCountry(countryCode);\n    setCountryInfo(data);  //All of the data from the country response\n  })                         \n}\n\n  console.log(\"COUNTRY INFO >>>\" , countryInfo)\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {countries.map((country) => (\n              <MenuItem value = {country.value}>{country.name}</MenuItem>\n            ))}\n              </Select>\n          </FormControl>\n        </div>\n      \n        <div className=\"app__stats\">\n          <InfoBox title = \"Coronavirus Cases\" cases={countryInfo.todayCases}  total={countryInfo.cases}/>\n\n          <InfoBox title = \"Recovered\" cases={countryInfo.todayRecovered}  total={countryInfo.recovered}/>\n\n          <InfoBox title = \"Deaths\" cases={countryInfo.todayDeaths}  total={countryInfo.deaths}/>\n        </div>\n      </div>\n      \n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries = {tableData} />\n          <h3>Worldwide cases</h3>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}